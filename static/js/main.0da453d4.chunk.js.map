{"version":3,"sources":["components/BlockieAvatar/index.tsx","components/BalanceList/index.tsx","components/WalletAddressLabel/index.tsx","apptypes.d/chain.d.ts","apptypes.d/wallet.d.ts","config/chains/cronos-mainnet-25-1.ts","config/chains/index.ts","config/chains/crypto-org-chain-mainnet-1.ts","config/defaultChainList.ts","config/keplrConfigs.ts","recoil/customChainList/atom.ts","recoil/chainList/selector.ts","recoil/chainList/index.ts","recoil/customCurrencyListOf/index.ts","recoil/customCurrencyListOf/atomFamily.ts","recoil/currencyListOf/index.ts","recoil/currencyListOf/selectorFamily.ts","recoil/currentChain/index.ts","recoil/currentChain/atom.ts","recoil/balanceOf/atom.ts","recoil/balanceOf/selectorFamily.ts","recoil/balanceOf/selector.ts","recoil/balanceOf/index.ts","recoil/currentWallet/atom.ts","recoil/currentWallet/currentAddressSelector.ts","recoil/currentWallet/index.ts","recoil/isPendingToConnectKeplr/index.ts","recoil/isPendingToConnectKeplr/atom.ts","containers/ConnectKeplrButton/index.tsx","components/ChainSelect/index.tsx","components/CurrencySelect/index.tsx","components/IBCChannelSelect/index.tsx","config/defaultIBCChannelList.ts","recoil/customIBCChannelListOfSourceChain/index.ts","recoil/customIBCChannelListOfSourceChain/atomFamily.ts","recoil/ibcChannelListOf/ibcChannelListOfSourceChainSelectorFamily.ts","recoil/ibcChannelListOf/index.ts","recoil/ibcChannelListOf/selectorFamily.ts","containers/Transfer/index.tsx","containers/WalletMain/index.tsx","containers/WalletHeader/WalletHeaderChainSelector/index.tsx","containers/WalletHeader/index.tsx","containers/WalletApp/Layout.tsx","error.ts","service/cosmos.ts","service/keplr.ts","containers/WalletApp/StateEffect.tsx","containers/WalletApp/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BlockieAvatar","props","value","Avatar","Tooltip","title","alt","src","makeBlockie","BalanceList","List","sx","width","bgcolor","balances","map","coin","ListItem","secondaryAction","IconButton","edge","ListItemAvatar","denom","ListItemText","primary","humanReadableAmount","humanReadableDenom","secondary","amount","WalletAddressLabel","ChainSource","ChainNetwork","WalletType","addressEllipsis","address","slice","React","useState","setValue","isDisabled","copyable","Button","borderRadius","paddingRight","paddingLeft","textTransform","variant","endIcon","onClick","copy","setTimeout","disabled","marginRight","Typography","CronosMainnet25_1","chain","id","name","network","Mainnet","source","AppDefault","rpcBaseURLs","tendermint","lcd","explorerURLs","account","transaction","currencyList","coinMinimalDenom","coinDenom","coinDecimals","alwaysDisplay","ibcChannelList","destinationChainId","channelId","label","keplrChainInfo","chainId","chainName","rpc","rest","stakeCurrency","coinGeckoId","bip44","coinType","bech32Config","bech32PrefixAccAddr","bech32PrefixAccPub","bech32PrefixValAddr","bech32PrefixValPub","bech32PrefixConsAddr","bech32PrefixConsPub","currencies","feeCurrencies","gasPriceStep","low","average","high","features","chainList","KeplrDefault","defaultChainList","KeplrConfigs","reduce","keplrConfigs","customChainListAtom","atom","key","default","chainListSelector","selector","get","customChainList","customCurrencyListOfAtomFamily","atomFamily","currencyListOfSelectorFamily","selectorFamily","chainListAtom","find","customCurrencyList","currentChainAtom","_balancesAtomFamily","_balanceDenomListAtom","balanceOfSelectorFamily","balance","currency","BigNumber","dividedBy","pow","toFormat","set","reset","DefaultValue","prevState","filter","d","includes","allBalanceOfSelector","currencyListOfSelector","forEach","push","sort","a","b","aScore","findIndex","length","bScore","Error","currentWalletAtom","currentAddressSelector","wallet","isPendingToConnectKeplr","ConnectKeplrButton","useRecoilState","isPendingToConnectKeplrAtom","setIsPendingToConnectKeplr","handleClick","useCallback","startIcon","ChainSelect","Select","onChange","event","newChain","target","MenuItem","CurrencySelect","newCurrency","IBCChannelSelect","allChainList","useRecoilValue","groupedIBCChannels","useMemo","channel","menuItemElemList","Object","keys","elementList","sourceChainChannels","destinationChainName","ListSubheader","sourceChainChannel","handleChange","newChannel","destinationChainIdValue","channelIdValue","defaultIBCChannels","channels","customIBCChannelListOfSourceChainAtomFamily","ibcChannelListOfSourceChainSelectorFamily","sourceChainId","customIBCChannelList","hasOwnProperty","ibcChannelListOfSelectorFamily","TransferFormControl","FormControl","margin","fullWidth","AmountInputComponent","forwardRef","ref","other","getInputRef","onValueChange","values","thousandSeparator","isNumericString","ibcTimeoutDurationMarkList","duration","minutes","hour","hours","day","ibcTimeoutDurationValueText","mark","Transfer","enqueueSnackbar","useSnackbar","currentChain","currentWallet","allBalanceOf","tokenList","currencyDef","token","setToken","handleTokenChange","setAmount","handleAmountChange","isLessThan","minimalCoinAmount","multipliedBy","toAddress","setToAddress","handleToAddressChange","toChain","setToChain","handleToChainChange","isIBCTransfer","ibcChannels","ibcChannel","setIBCChannel","useEffect","handleIBCChannelChange","console","log","ibcTimeoutMark","setIBCTimeoutMark","handleIBCTimeoutChange","activeThumb","ibcTimeout","isSending","setIsSending","notifyDeliveryTxResult","result","code","href","replaceAll","transactionHash","rel","sendOnKeplr","offlineSigner","type","Ledger","window","getOfflineSignerOnlyAmino","getOfflineSigner","SigningStargateClient","connectWithSigner","cosmJS","sendIbcTokens","toString","revisionNumber","Long","fromNumber","revisionHeight","DateTime","now","setZone","plus","toMillis","gas","sendTokens","finally","Fragment","TextField","input","textAlign","InputProps","startAdornment","InputAdornment","position","InputLabel","labelId","FormHelperText","inputComponent","endAdornment","marginLeft","Box","marginTop","marginBottom","align","Slider","min","max","marks","getAriaValueText","step","valueLabelDisplay","Separator","styled","padding","WalletMain","tabPage","setTabPage","p","backgroundColor","display","justifyContent","alignItems","fontSize","Tabs","centered","newValue","open","Tab","onStartTransfer","WalletHeaderChainSelector","setCurrentChain","handleChainSelectorChange","SingleLineItem","flexGrow","flexShrink","WalletHeader","currentAddress","flexWrap","whiteSpace","overflow","WalletAppLayout","errorMessageGuard","err","defaultMessage","message","getAccountCoinList","lcdBaseURL","coinList","limit","page","getBankBalanceList","bankBalanceList","bankBalance","startsWith","getIBCDenomTraces","offset","axios","resp","data","denom_trace","path","base_denom","addChainToKeplr","Chain","keplr","experimentalSuggestChain","WalletAppStateEffect","setCurrentWallet","resetCurrentWallet","useResetRecoilState","resetAllBalanceOf","prevChain","useRef","current","updateCurrentWallet","getKey","isNanoLedger","Local","bech32Address","isConnectingKeplr","connectKeplr","enable","updateWalletBalances","useRecoilCallback","addEventListener","prevWalletAddress","updateWalletBalancesPeriodically","WalletApp","element","Layout","index","AppViewport","Container","maxWidth","height","children","KeplrNotInstalled","location","reload","App","isKeplrInstalled","className","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ErrorBoundary","state","hasError","error","errorInfo","this","Component","ReactDOM","render","StrictMode","basename","process","maxSnack","anchorOrigin","vertical","horizontal","document","getElementById"],"mappings":"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","file":"static/js/main.0da453d4.chunk.js","sourcesContent":["import Avatar, { AvatarProps } from '@mui/material/Avatar';\nimport Tooltip from '@mui/material/Tooltip';\nimport makeBlockie from 'ethereum-blockies-base64';\n\nexport type BlockieAvatarProps = AvatarProps & {\n  value: string;\n};\n\nfunction BlockieAvatar(props: BlockieAvatarProps) {\n  if (props.value === '') {\n    return <Avatar />;\n  }\n\n  return (\n    <Tooltip title={props.value}>\n      <Avatar alt={props.value} src={makeBlockie(props.value)} {...props} />\n    </Tooltip>\n  );\n}\n\nexport default BlockieAvatar;\n","import { Coin, Denom } from '../../apptypes.d';\nimport BlockieAvatar from '../BlockieAvatar';\nimport SendIcon from '@mui/icons-material/Send';\nimport IconButton from '@mui/material/IconButton';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemText from '@mui/material/ListItemText';\n\nfunction BalanceList(props: BalanceListProps) {\n  return (\n    <List sx={{ width: '100%', bgcolor: 'background.paper' }}>\n      {props.balances.map((coin: Coin) => (\n        <ListItem\n          key={coin.denom}\n          secondaryAction={\n            <IconButton edge=\"end\" aria-label=\"transfer\">\n              <SendIcon />\n            </IconButton>\n          }>\n          <ListItemAvatar>\n            <BlockieAvatar value={coin.denom} />\n          </ListItemAvatar>\n          <ListItemText\n            primary={`${coin.humanReadableAmount} ${coin.humanReadableDenom}`}\n            secondary={`${coin.amount} ${coin.denom}`}\n          />\n        </ListItem>\n      ))}\n    </List>\n  );\n}\n\nexport type BalanceListProps = {\n  balances: Coin[];\n  onStartTransfer: (denom: Denom) => void;\n};\n\nexport default BalanceList;\n","import ContentCopyRoundedIcon from '@mui/icons-material/ContentCopyRounded';\nimport Button from '@mui/material/Button';\nimport Tooltip from '@mui/material/Tooltip';\nimport Typography from '@mui/material/Typography';\nimport copy from 'copy-to-clipboard';\nimport React, { MouseEventHandler } from 'react';\nimport BlockieAvatar from '../BlockieAvatar';\n\nfunction WalletAddressLabel(props: WalletAddressLabelProps) {\n  const addressEllipsis = props.address.slice(0, 10) + '...' + props.address.slice(-8);\n\n  const [value, setValue] = React.useState(addressEllipsis);\n  const handleButtonClick: MouseEventHandler<HTMLButtonElement> = () => {\n    if (!props.copyable) {\n      return;\n    }\n\n    copy(addressEllipsis);\n    setValue('Copied!');\n    setTimeout(() => {\n      setValue(addressEllipsis);\n    }, 1000);\n  };\n  const isDisabled = !props.copyable;\n\n  return (\n    <Tooltip title={props.address}>\n      <Button\n        sx={{\n          borderRadius: 4,\n          paddingRight: '25px',\n          paddingLeft: '25px',\n          textTransform: 'none',\n        }}\n        variant=\"outlined\"\n        endIcon={<ContentCopyRoundedIcon />}\n        onClick={handleButtonClick}\n        disabled={isDisabled}>\n        <BlockieAvatar\n          sx={{\n            marginRight: '10px',\n          }}\n          value={props.address}\n        />\n        <Typography\n          sx={{\n            width: '200px',\n          }}>\n          {value}\n        </Typography>\n      </Button>\n    </Tooltip>\n  );\n}\n\nexport type WalletAddressLabelProps = {\n  address: string;\n  copyable?: boolean;\n};\n\nexport default WalletAddressLabel;\n","import { Currency } from './coin';\n\nexport type Chain = {\n  id: string;\n  name: string;\n  network?: ChainNetwork;\n  source: ChainSource;\n  rpcBaseURLs: {\n    tendermint: string;\n    lcd: string;\n  };\n  explorerURLs: {\n    account: string;\n    transaction: string;\n  };\n  currencyList: Currency[];\n};\n\nexport enum ChainSource {\n  KeplrDefault = 'keplrDefault',\n  AppDefault = 'AppDefault',\n  Custom = 'Custom',\n}\n\nexport enum ChainNetwork {\n  Mainnet = 'Mainnet',\n  Testnet = 'Testnet',\n  Local = 'Local',\n}\n","export type Wallet = {\n  name: string;\n  type: WalletType;\n  address: string;\n};\n\nexport enum WalletType {\n  Local = 'Local',\n  Ledger = 'Ledger',\n}\n","import { ChainNetwork, ChainSource } from '../../apptypes.d';\nimport { ChainConfig } from '../types';\n\nconst CronosMainnet25_1: ChainConfig = {\n  chain: {\n    id: 'cronosmainnet_25-1',\n    name: 'Cronos',\n    network: ChainNetwork.Mainnet,\n    source: ChainSource.AppDefault,\n    rpcBaseURLs: {\n      tendermint: 'https://rpc-cronos.crypto.org',\n      lcd: 'https://rest-cronos.crypto.org',\n    },\n    explorerURLs: {\n      account: 'https://cronoscan.com/address/{account}',\n      transaction: 'https://rest-cronos.crypto.org/cosmos/tx/v1beta1/txs/{transaction}',\n    },\n    currencyList: [\n      {\n        coinMinimalDenom: 'basecro',\n        coinDenom: 'CRO',\n        coinDecimals: 18,\n        alwaysDisplay: true,\n      },\n    ],\n  },\n  ibcChannelList: [\n    {\n      destinationChainId: 'crypto-org-chain-mainnet-1',\n      channelId: 'channel-0',\n      label: 'Cronos Bridge',\n    },\n  ],\n  keplrChainInfo: {\n    // Chain-id of the Cosmos SDK chain.\n    chainId: 'cronosmainnet_25-1',\n    // The name of the chain to be displayed to the user.\n    chainName: 'Cronos',\n    // RPC endpoint of the chain.\n    rpc: 'https://rpc-cronos.crypto.org',\n    // REST endpoint of the chain.\n    rest: 'https://rest-cronos.crypto.org',\n    // Staking coin information\n    stakeCurrency: {\n      // Coin denomination to be displayed to the user.\n      coinDenom: 'CRO',\n      // Actual denom (i.e. uatom, uscrt) used by the blockchain.\n      coinMinimalDenom: 'basecro',\n      // # of decimal points to convert minimal denomination to user-facing denomination.\n      coinDecimals: 18,\n      // (Optional) Keplr can show the fiat value of the coin if a coingecko id is provided.\n      // You can get id from https://api.coingecko.com/api/v3/coins/list if it is listed.\n      coinGeckoId: 'crypto-com-chain',\n    },\n    // (Optional) If you have a wallet webpage used to stake the coin then provide the url to the website in `walletUrlForStaking`.\n    // The 'stake' button in Keplr extension will link to the webpage.\n    // walletUrlForStaking: \"\",\n    // The BIP44 path.\n    bip44: {\n      // You can only set the coin type of BIP44.\n      // 'Purpose' is fixed to 44.\n      coinType: 60,\n    },\n    // Bech32 configuration to show the address to user.\n    // This field is the interface of\n    // {\n    //   bech32PrefixAccAddr: string;\n    //   bech32PrefixAccPub: string;\n    //   bech32PrefixValAddr: string;\n    //   bech32PrefixValPub: string;\n    //   bech32PrefixConsAddr: string;\n    //   bech32PrefixConsPub: string;\n    // }\n    bech32Config: {\n      bech32PrefixAccAddr: 'crc',\n      bech32PrefixAccPub: 'crcpub',\n      bech32PrefixValAddr: 'crcvaloper',\n      bech32PrefixValPub: 'crcvaloperpub',\n      bech32PrefixConsAddr: 'crcvalcons',\n      bech32PrefixConsPub: 'crcvalconspub',\n    },\n    // List of all coin/tokens used in this chain.\n    currencies: [\n      {\n        // Coin denomination to be displayed to the user.\n        coinDenom: 'CRO',\n        // Actual denom (i.e. uatom, uscrt) used by the blockchain.\n        coinMinimalDenom: 'basecro',\n        // # of decimal points to convert minimal denomination to user-facing denomination.\n        coinDecimals: 18,\n        // (Optional) Keplr can show the fiat value of the coin if a coingecko id is provided.\n        // You can get id from https://api.coingecko.com/api/v3/coins/list if it is listed.\n        coinGeckoId: 'crypto-com-chain',\n      },\n    ],\n    // List of coin/tokens used as a fee token in this chain.\n    feeCurrencies: [\n      {\n        // Coin denomination to be displayed to the user.\n        coinDenom: 'CRO',\n        // Actual denom (i.e. uatom, uscrt) used by the blockchain.\n        coinMinimalDenom: 'basecro',\n        // # of decimal points to convert minimal denomination to user-facing denomination.\n        coinDecimals: 18,\n        // (Optional) Keplr can show the fiat value of the coin if a coingecko id is provided.\n        // You can get id from https://api.coingecko.com/api/v3/coins/list if it is listed.\n        coinGeckoId: 'crypto-com-chain',\n      },\n    ],\n    // (Optional) The number of the coin type.\n    // This field is only used to fetch the address from ENS.\n    // Ideally, it is recommended to be the same with BIP44 path's coin type.\n    // However, some early chains may choose to use the Cosmos Hub BIP44 path of '118'.\n    // So, this is separated to support such chains.\n    coinType: 60,\n    // (Optional) This is used to set the fee of the transaction.\n    // If this field is not provided, Keplr extension will set the default gas price as (low: 0.01, average: 0.025, high: 0.04).\n    // Currently, Keplr doesn't support dynamic calculation of the gas prices based on on-chain data.\n    // Make sure that the gas prices are higher than the minimum gas prices accepted by chain validators and RPC/REST endpoint.\n    gasPriceStep: {\n      low: 5000000000000,\n      average: 5000000000000,\n      high: 5000000000000,\n    },\n    features: ['stargate', 'ibc-transfer'],\n  },\n};\n\nexport default CronosMainnet25_1;\n","import CronosMainnet25_1 from './cronos-mainnet-25-1';\nimport CryptoOrgChainMainnet_1 from './crypto-org-chain-mainnet-1';\n\nconst chainList = [CryptoOrgChainMainnet_1, CronosMainnet25_1];\n\nexport default chainList;\n","import { ChainNetwork, ChainSource } from '../../apptypes.d';\nimport { ChainConfig } from '../types';\n\nconst CryptoOrgChainMainnet_1: ChainConfig = {\n  chain: {\n    id: 'crypto-org-chain-mainnet-1',\n    name: 'Crypto.org Chain',\n    network: ChainNetwork.Mainnet,\n    source: ChainSource.KeplrDefault,\n    rpcBaseURLs: {\n      tendermint: 'https://mainnet.crypto.org:26657',\n      lcd: 'https://mainnet.crypto.org:1317',\n    },\n    explorerURLs: {\n      account: 'https://crypto.org/explorer/account/{account}',\n      transaction: 'https://crypto.org/explorer/tx/{transaction}',\n    },\n    currencyList: [\n      {\n        coinMinimalDenom: 'basecro',\n        coinDenom: 'CRO',\n        coinDecimals: 8,\n        alwaysDisplay: true,\n      },\n      {\n        coinMinimalDenom: 'ibc/A921F94469C4A81C0F5766264384AE2620B2B0449C7217162A4636EC2CE01E52',\n        coinDenom: 'DOT',\n        coinDecimals: 10,\n      },\n    ],\n  },\n  ibcChannelList: [\n    {\n      destinationChainId: 'cronosmainnet_25-1',\n      label: 'Cronos Bridge',\n      channelId: 'channel-44',\n    },\n  ],\n};\n\nexport default CryptoOrgChainMainnet_1;\n","import chainList from './chains';\n\nconst defaultChainList = chainList.map((chain) => chain.chain);\n\nexport default defaultChainList;\n","import { ChainInfo } from '@keplr-wallet/types';\nimport { ChainSource } from '../apptypes.d';\nimport chainList from './chains';\n\nconst KeplrConfigs = chainList.reduce<{\n  [chainId: string]: ChainInfo;\n}>((keplrConfigs, chain) => {\n  if (chain.chain.source === ChainSource.AppDefault) {\n    keplrConfigs[chain.chain.id] = chain.keplrChainInfo!;\n  }\n  return keplrConfigs;\n}, {});\n\nexport default KeplrConfigs;\n","import { atom } from 'recoil';\nimport { Chain } from '../../apptypes.d';\n\nconst customChainListAtom = atom<Chain[]>({\n  key: 'customChainList',\n  default: [],\n});\n\nexport default customChainListAtom;\n","import { RecoilValueReadOnly, selector } from 'recoil';\nimport { Chain } from '../../apptypes.d';\nimport { defaultChainList } from '../../config';\nimport customChainListAtom from '../customChainList/atom';\n\nconst chainListSelector: RecoilValueReadOnly<Chain[]> = selector({\n  key: 'chainList',\n  get: ({ get }): Chain[] => {\n    const customChainList = get(customChainListAtom);\n    return [...defaultChainList, ...customChainList];\n  },\n});\n\nexport default chainListSelector;\n","import chainListSelector from './selector';\n\nexport default chainListSelector;\n","import customCurrencyListOfAtomFamily from './atomFamily';\n\nexport default customCurrencyListOfAtomFamily;\n","import { atomFamily } from 'recoil';\nimport { Currency } from '../../apptypes.d';\n\nconst customCurrencyListOfAtomFamily = atomFamily<Currency[], ChainId>({\n  key: 'customCurrencyListOf',\n  default: [],\n});\n\ntype ChainId = string;\n\nexport default customCurrencyListOfAtomFamily;\n","import currencyListOfSelectorFamily from './selectorFamily';\n\nexport default currencyListOfSelectorFamily;\n","import { selectorFamily } from 'recoil';\nimport { Currency } from '../../apptypes.d';\nimport chainListAtom from '../chainList';\nimport customCurrencyListOfAtomFamily from '../customCurrencyListOf';\n\nconst currencyListOfSelectorFamily = selectorFamily<Currency[], string>({\n  key: 'currencyListOf',\n  get:\n    (chainId: string) =>\n    ({ get }) => {\n      const chain = get(chainListAtom).find((chain) => chain.id === chainId);\n      if (!chain) {\n        return [];\n      }\n\n      const customCurrencyList = get(customCurrencyListOfAtomFamily(chainId));\n\n      return [...chain.currencyList, ...customCurrencyList];\n    },\n});\n\nexport default currencyListOfSelectorFamily;\n","import currentChainAtom from './atom';\n\nexport default currentChainAtom;\n","import { atom, selector } from 'recoil';\nimport { Chain } from '../../apptypes.d';\nimport chainListSelector from '../chainList/selector';\n\nconst currentChainAtom = atom<Chain>({\n  key: 'currentChain',\n  default: selector({\n    key: 'firstChainOnChainList',\n    get: ({ get }): Chain => {\n      const chainList = get(chainListSelector);\n      return chainList[0];\n    },\n  }),\n});\n\nexport default currentChainAtom;\n","import { Coin, Denom } from '../../apptypes.d';\nimport { atom, atomFamily } from 'recoil';\n\n// _balancesAtomFamily and _balanceDenomListAtom are internal atoms to support a reset-all-able\n// balance atom family.\n\nconst _balancesAtomFamily = atomFamily<Coin, Denom>({\n  key: 'balances',\n  default: (denom: Denom) => ({\n    denom,\n    amount: '0',\n    humanReadableDenom: denom,\n    humanReadableAmount: '0',\n  }),\n});\n\nconst _balanceDenomListAtom = atom<Denom[]>({\n  key: 'balanceDenomLists',\n  default: [],\n});\n\nexport { _balancesAtomFamily, _balanceDenomListAtom };\n","import { Coin, Denom } from '../../apptypes.d';\nimport currencyListOfSelectorFamily from '../currencyListOf';\nimport currentChainAtom from '../currentChain';\nimport { _balanceDenomListAtom, _balancesAtomFamily } from './atom';\nimport BigNumber from 'bignumber.js';\nimport { DefaultValue, selectorFamily } from 'recoil';\n\nconst balanceOfSelectorFamily = selectorFamily<Coin, Denom>({\n  key: 'balanceOf',\n  get:\n    (denom: Denom) =>\n    ({ get }) => {\n      const balance = get(_balancesAtomFamily(denom));\n      const currency = get(currencyListOfSelectorFamily(get(currentChainAtom).id)).find(\n        (currency) => currency.coinMinimalDenom === denom,\n      );\n      if (!currency) {\n        return balance;\n      }\n\n      return {\n        ...balance,\n        humanReadableDenom: currency.coinDenom,\n        humanReadableAmount: new BigNumber(balance.amount)\n          .dividedBy(new BigNumber(10).pow(currency.coinDecimals))\n          .toFormat(currency.coinDecimals),\n      };\n    },\n  set:\n    (denom: Denom) =>\n    ({ get, set, reset }, balance) => {\n      if (balance instanceof DefaultValue) {\n        reset(_balancesAtomFamily(denom));\n        set(_balanceDenomListAtom, (prevState) => prevState.filter((d) => d !== denom));\n        return;\n      }\n      set(_balancesAtomFamily(denom), balance);\n      if (!get(_balanceDenomListAtom).includes(denom)) {\n        set(_balanceDenomListAtom, (prevState) => [...prevState, denom]);\n      }\n    },\n});\n\nexport default balanceOfSelectorFamily;\n","import { Coin } from '../../apptypes.d';\nimport currencyListOfSelector from '../currencyListOf';\nimport currentChainAtom from '../currentChain';\nimport { _balanceDenomListAtom } from './atom';\nimport balanceOfSelectorFamily from './selectorFamily';\nimport { DefaultValue, selector } from 'recoil';\n\n// A special selector that helps get and reset all balanceOf selector family members with\n// useRecoilValue(allBalanceOfSelector) and useResetRecoilState(allBalanceOfSelector).\nconst allBalanceOfSelector = selector<Coin[]>({\n  key: 'allBalanceOf',\n  get: ({ get }) => {\n    const balances = get(_balanceDenomListAtom)\n      .map((denom) => get(balanceOfSelectorFamily(denom)))\n      .map((balance) => ({\n        ...balance,\n      }));\n\n    // TODO: Move logic to SelectorFamily\n    const currencyList = get(currencyListOfSelector(get(currentChainAtom).id));\n    currencyList\n      .filter((currency) => currency.alwaysDisplay)\n      .forEach((currency) => {\n        if (!balances.find((balance) => balance.denom === currency.coinMinimalDenom)) {\n          balances.push({\n            denom: currency.coinDenom,\n            amount: '0',\n            humanReadableDenom: currency.coinMinimalDenom,\n            humanReadableAmount: '0',\n          });\n        }\n      });\n\n    return balances.sort((a, b) => {\n      const aScore = currencyList.findIndex((currency) => currency.coinMinimalDenom === a.denom);\n      if (aScore === -1) {\n        return currencyList.length;\n      }\n      const bScore = currencyList.findIndex((currency) => currency.coinMinimalDenom === b.denom);\n      if (bScore === -1) {\n        return currencyList.length;\n      }\n\n      return aScore - bScore;\n    });\n  },\n  set: ({ get, reset }, balance) => {\n    if (balance instanceof DefaultValue) {\n      get(_balanceDenomListAtom).forEach((denom) => {\n        reset(balanceOfSelectorFamily(denom));\n      });\n      reset(_balanceDenomListAtom);\n      return;\n    }\n    // Do nothing\n    throw new Error('unsupported set operation');\n  },\n});\n\nexport default allBalanceOfSelector;\n","import balanceOfSelectorFamily from './selectorFamily';\nimport allBalanceOfSelector from './selector';\n\nexport default balanceOfSelectorFamily;\n\nexport {\n  allBalanceOfSelector,\n};\n","import { atom } from 'recoil';\nimport { Wallet } from '../../apptypes.d';\n\nconst currentWalletAtom = atom<Wallet | null>({\n  key: 'currentWallet',\n  default: null,\n});\n\nexport default currentWalletAtom;\n","import { selector } from 'recoil';\nimport currentWalletAtom from './atom';\n\nconst currentAddressSelector = selector<string>({\n  key: 'currentWallet/Address',\n  get: ({ get }) => {\n    const wallet = get(currentWalletAtom);\n    if (wallet === null) {\n      return '';\n    }\n\n    return wallet.address;\n  },\n});\n\nexport default currentAddressSelector;\n","import currentWalletAtom from './atom';\nimport currentAddressSelector from './currentAddressSelector';\n\nexport { currentAddressSelector };\n\nexport default currentWalletAtom;\n","import isPendingToConnectKeplr from './atom';\n\nexport default isPendingToConnectKeplr;\n","import { atom } from 'recoil';\n\nconst isPendingToConnectKeplr = atom({\n  key: 'isPendingToConnectKeplr',\n  default: false,\n});\n\nexport default isPendingToConnectKeplr;\n","import AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet';\nimport Button, { ButtonProps } from '@mui/material/Button';\nimport React, { useCallback } from 'react';\nimport { useRecoilState } from 'recoil';\nimport isPendingToConnectKeplrAtom from '../../recoil/isPendingToConnectKeplr';\n\nfunction ConnectKeplrButton(props: ButtonProps) {\n  const [isPendingToConnectKeplr, setIsPendingToConnectKeplr] = useRecoilState(\n    isPendingToConnectKeplrAtom,\n  );\n\n  const handleClick = useCallback(() => {\n    setIsPendingToConnectKeplr(true);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <Button\n      startIcon={<AccountBalanceWalletIcon />}\n      variant=\"contained\"\n      disabled={isPendingToConnectKeplr}\n      onClick={handleClick}\n      {...props}>\n      {isPendingToConnectKeplr ? 'Connecting Keplr...' : 'Connect Keplr'}\n    </Button>\n  );\n}\n\nexport default ConnectKeplrButton;\n","import MenuItem from '@mui/material/MenuItem';\nimport Select, { SelectProps } from '@mui/material/Select';\nimport { SelectInputProps } from '@mui/material/Select/SelectInput';\nimport React from 'react';\nimport { Chain } from '../../apptypes.d';\n\nfunction ChainSelect(props: ChainSelectProps) {\n  const handleSelectChange: SelectInputProps<ChainId>['onChange'] = (event) => {\n    if (!props.onChange) {\n      return;\n    }\n\n    const newChain = props.chainList.find((chain) => chain.id === event.target.value)!;\n    props.onChange(newChain);\n  };\n\n  return (\n    <Select {...props} onChange={handleSelectChange}>\n      {props.chainList.map((chain) => (\n        <MenuItem key={chain.id} value={chain.id}>\n          {chain.name}\n        </MenuItem>\n      ))}\n    </Select>\n  );\n}\n\nexport type ChainSelectProps = Omit<SelectProps<ChainId>, 'onChange'> & {\n  chainList: Chain[];\n  onChange?: (chain: Chain) => void;\n};\n\ntype ChainId = string;\n\nexport default ChainSelect;\n","import { Currency } from '../../apptypes.d';\nimport MenuItem from '@mui/material/MenuItem';\nimport Select, { SelectProps } from '@mui/material/Select';\nimport { SelectInputProps } from '@mui/material/Select/SelectInput';\nimport React from 'react';\n\nfunction CurrencySelect(props: CurrencySelectProps) {\n  const handleChange: SelectInputProps<CoinMinimalDenom>['onChange'] = (event) => {\n    if (!props.onChange) {\n      return;\n    }\n\n    const newCurrency = props.currencyList.find(\n      (currency) => currency.coinMinimalDenom === event.target.value,\n    )!;\n    props.onChange(newCurrency);\n  };\n\n  return (\n    <Select {...props} onChange={handleChange}>\n      {props.currencyList.map((currency) => (\n        <MenuItem key={currency.coinMinimalDenom} value={currency.coinMinimalDenom}>\n          {currency.coinDenom}\n        </MenuItem>\n      ))}\n    </Select>\n  );\n}\n\nexport type CurrencySelectProps = Omit<SelectProps<CoinMinimalDenom>, 'onChange'> & {\n  currencyList: Currency[];\n  onChange?: (currency: Currency) => void;\n};\n\ntype CoinMinimalDenom = string;\n\nexport default CurrencySelect;\n","import { IBCSourceChainChannel } from '../../apptypes.d';\nimport chainListSelector from '../../recoil/chainList';\nimport ListSubheader from '@mui/material/ListSubheader';\nimport MenuItem from '@mui/material/MenuItem';\nimport Select, { SelectProps } from '@mui/material/Select';\nimport { SelectInputProps } from '@mui/material/Select/SelectInput';\nimport React, { useCallback, useMemo } from 'react';\nimport { useRecoilValue } from 'recoil';\n\nfunction IBCChannelSelect(props: IBCChannelSelectProps) {\n  const allChainList = useRecoilValue(chainListSelector);\n\n  const groupedIBCChannels = useMemo(() => {\n    return props.ibcChannelList.reduce<{\n      [destinationChainId: string]: IBCSourceChainChannel[];\n    }>((groupedIBCChannels, channel) => {\n      if (!groupedIBCChannels[channel.destinationChainId]) {\n        groupedIBCChannels[channel.destinationChainId] = [];\n      }\n\n      groupedIBCChannels[channel.destinationChainId].push(channel);\n\n      return groupedIBCChannels;\n    }, {});\n  }, [props.ibcChannelList]);\n\n  const menuItemElemList = useMemo(() => {\n    return Object.keys(groupedIBCChannels).reduce<JSX.Element[]>(\n      (elementList, destinationChainId) => {\n        const sourceChainChannels = groupedIBCChannels[destinationChainId];\n        const destinationChainName =\n          allChainList.find((chain) => chain.id === destinationChainId)?.name || destinationChainId;\n\n        return [\n          ...elementList,\n          <ListSubheader key={destinationChainId}>{destinationChainName}</ListSubheader>,\n          ...sourceChainChannels.map((sourceChainChannel) => (\n            <MenuItem\n              key={`${destinationChainId}-${sourceChainChannel.channelId}`}\n              value={`${destinationChainId}-${sourceChainChannel.channelId}`}>\n              {destinationChainName} - {sourceChainChannel.channelId}{' '}\n              {sourceChainChannel.label && `(${sourceChainChannel.label})`}\n            </MenuItem>\n          )),\n        ];\n      },\n      [],\n    );\n  }, [groupedIBCChannels, allChainList]);\n\n  const handleChange: SelectInputProps<SourceChainChannelId>['onChange'] = useCallback(\n    (event) => {\n      if (!props.onChange) {\n        return;\n      }\n\n      const newChannel = props.ibcChannelList.find(\n        (channel) => `${channel.destinationChainId}-${channel.channelId}` === event.target.value,\n      )!;\n      props.onChange(newChannel);\n    },\n    [props.onChange, props.ibcChannelList], // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  const value = useMemo(() => {\n    if (props.destinationChainIdValue && props.channelIdValue) {\n      return `${props.destinationChainIdValue}-${props.channelIdValue}`;\n    }\n\n    return undefined;\n  }, [props.destinationChainIdValue, props.channelIdValue]);\n\n  return (\n    <Select {...props} value={value} onChange={handleChange}>\n      {menuItemElemList}\n    </Select>\n  );\n}\n\nexport type IBCChannelSelectProps = Omit<\n  SelectProps<SourceChainChannelId>,\n  'onChange' | 'value'\n> & {\n  ibcChannelList: IBCSourceChainChannel[];\n  onChange?: (ibcChannel: IBCSourceChainChannel) => void;\n  destinationChainIdValue?: string;\n  channelIdValue?: string;\n};\n\ntype SourceChainChannelId = string;\n\nexport default IBCChannelSelect;\n","import { IBCChannelConfig } from '../apptypes.d';\nimport chainList from './chains';\n\nconst defaultIBCChannels: IBCChannelConfig = chainList.reduce<IBCChannelConfig>(\n  (channels, chain) => {\n    channels[chain.chain.id] = chain.ibcChannelList;\n\n    return channels;\n  },\n  {},\n);\n\nexport default defaultIBCChannels;\n","import customIBCChannelListOfSourceChainAtomFamily from './atomFamily';\n\nexport default customIBCChannelListOfSourceChainAtomFamily;\n","import { atomFamily } from 'recoil';\nimport { IBCSourceChainChannel } from '../../apptypes.d';\n\nconst customIBCChannelListOfSourceChainAtomFamily = atomFamily<\n  IBCSourceChainChannel[],\n  SourceChainId\n>({\n  key: 'customIBCChannelListOf',\n  default: [],\n});\n\ntype SourceChainId = string;\n\nexport default customIBCChannelListOfSourceChainAtomFamily;\n","import { selectorFamily } from 'recoil';\nimport { IBCSourceChainChannel } from '../../apptypes.d';\nimport defaultIBCChannels from '../../config/defaultIBCChannelList';\nimport customIBCChannelListOfSourceChainAtomFamily from '../customIBCChannelListOfSourceChain';\n\nconst ibcChannelListOfSourceChainSelectorFamily = selectorFamily<IBCSourceChainChannel[], string>({\n  key: 'ibcChannelListOfSourceChain',\n  get:\n    (sourceChainId: string) =>\n    ({ get }) => {\n      const customIBCChannelList = get(customIBCChannelListOfSourceChainAtomFamily(sourceChainId));\n\n      if (!defaultIBCChannels.hasOwnProperty(sourceChainId)) {\n        return customIBCChannelList;\n      }\n\n      return [...defaultIBCChannels[sourceChainId], ...customIBCChannelList];\n    },\n});\n\nexport default ibcChannelListOfSourceChainSelectorFamily;\n","import ibcChannelListOfSourceChainSelectorFamily from './ibcChannelListOfSourceChainSelectorFamily';\nimport ibcChannelListOfSelectorFamily from './selectorFamily';\n\nexport { ibcChannelListOfSourceChainSelectorFamily };\n\nexport default ibcChannelListOfSelectorFamily;\n","import { selectorFamily } from 'recoil';\nimport { IBCSourceChainChannel } from '../../apptypes.d';\nimport ibcChannelListOfSourceChainSelectorFamily from './ibcChannelListOfSourceChainSelectorFamily';\n\nconst ibcChannelListOfSelectorFamily = selectorFamily<\n  IBCSourceChainChannel[],\n  IBCChannelListAccessor\n>({\n  key: 'ibcChannelListOfSourceChain',\n  get:\n    ({ sourceChainId, destinationChainId }: IBCChannelListAccessor) =>\n    ({ get }) => {\n      const channelListOfSourceChain = get(\n        ibcChannelListOfSourceChainSelectorFamily(sourceChainId),\n      );\n\n      return channelListOfSourceChain.filter(\n        (channel) => channel.destinationChainId === destinationChainId,\n      );\n    },\n});\n\nexport type IBCChannelListAccessor = {\n  sourceChainId: string;\n  destinationChainId: string;\n};\n\nexport default ibcChannelListOfSelectorFamily;\n","import { Chain, Currency, IBCSourceChainChannel, Wallet, WalletType } from '../../apptypes.d';\nimport ChainSelect from '../../components/ChainSelect';\nimport CurrencySelect from '../../components/CurrencySelect';\nimport IBCChannelSelect from '../../components/IBCChannelSelect';\nimport balanceOfSelectorFamily, { allBalanceOfSelector } from '../../recoil/balanceOf';\nimport chainListSelector from '../../recoil/chainList/selector';\nimport currencyListOfSelectorFamily from '../../recoil/currencyListOf';\nimport currentChainAtom from '../../recoil/currentChain';\nimport currentWalletAtom from '../../recoil/currentWallet';\nimport ibcChannelListOfSelectorFamily from '../../recoil/ibcChannelListOf';\nimport { DeliverTxResponse, SigningStargateClient } from '@cosmjs/stargate';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport FormControl, { FormControlProps } from '@mui/material/FormControl';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport InputLabel from '@mui/material/InputLabel';\nimport Slider from '@mui/material/Slider';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport BigNumber from 'bignumber.js';\nimport Long from 'long';\nimport { DateTime, DurationLike } from 'luxon';\nimport { useSnackbar } from 'notistack';\nimport React, { ChangeEvent, useCallback, useEffect, useMemo, useState } from 'react';\nimport NumberFormat from 'react-number-format';\nimport { useRecoilValue } from 'recoil';\n\nfunction TransferFormControl(props: Omit<FormControlProps, 'margin' | 'fullWidth'>) {\n  return <FormControl sx={{ margin: 1 }} fullWidth {...props} />;\n}\n\nconst AmountInputComponent = React.forwardRef<\n  NumberFormat<NumberFormatCustomProps>,\n  NumberFormatCustomProps\n>(function NumberFormatCustom(props, ref) {\n  const { onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={ref}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value,\n          },\n        });\n      }}\n      thousandSeparator\n      isNumericString\n    />\n  );\n});\n\ninterface NumberFormatCustomProps {\n  onChange: (event: { target: { name: string; value: string } }) => void;\n  name: string;\n}\n\ntype TransferProps = {};\n\nconst ibcTimeoutDurationMarkList: {\n  value: number;\n  duration: DurationLike;\n  label: string;\n}[] = [\n  {\n    value: 0,\n    duration: { minutes: 5 },\n    label: '5 mins',\n  },\n  {\n    value: 1,\n    duration: { minutes: 15 },\n    label: '15 mins',\n  },\n  {\n    value: 2,\n    duration: { hour: 1 },\n    label: '1 hour',\n  },\n  {\n    value: 3,\n    duration: { hours: 2 },\n    label: '6 hours',\n  },\n  {\n    value: 4,\n    duration: { day: 1 },\n    label: '1 day',\n  },\n];\n\nfunction ibcTimeoutDurationValueText(value: number) {\n  return ibcTimeoutDurationMarkList.find((mark) => mark.value === value)?.label || 'test';\n}\n\nfunction Transfer(props: TransferProps) {\n  const { enqueueSnackbar } = useSnackbar();\n  const currentChain = useRecoilValue(currentChainAtom);\n  const chainList = useRecoilValue(chainListSelector);\n  const currentWallet = useRecoilValue(currentWalletAtom) as Wallet;\n  const currencyList = useRecoilValue(currencyListOfSelectorFamily(currentChain.id));\n  const allBalanceOf = useRecoilValue(allBalanceOfSelector);\n  const tokenList: Currency[] = useMemo(\n    () =>\n      allBalanceOf.map((balance) => {\n        const currencyDef = currencyList.find(\n          (currency) => currency.coinMinimalDenom === balance.denom,\n        );\n        if (currencyDef) {\n          return currencyDef;\n        }\n        return {\n          coinMinimalDenom: balance.denom,\n          coinDenom: balance.humanReadableDenom,\n          coinDecimals: 0,\n          alwaysDisplay: false,\n        };\n      }),\n    [allBalanceOf, currencyList],\n  );\n  const [token, setToken] = useState<Currency>(tokenList[0]);\n  const handleTokenChange = useCallback((currency: Currency) => {\n    setAmount('0');\n    setToken(currency);\n  }, []);\n\n  const balance = useRecoilValue(balanceOfSelectorFamily(token.coinMinimalDenom));\n  const [amount, setAmount] = useState<string>('0');\n  const handleAmountChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (new BigNumber(balance.humanReadableAmount).isLessThan(event.target.value)) {\n        setAmount(balance.humanReadableAmount);\n        return;\n      }\n      setAmount(event.target.value);\n    },\n    [balance],\n  );\n  const minimalCoinAmount = useMemo(\n    () => new BigNumber(amount).multipliedBy(new BigNumber(10).pow(token.coinDecimals)),\n    [token, amount],\n  );\n\n  const [toAddress, setToAddress] = useState<string>('');\n  const handleToAddressChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    setToAddress(event.target.value);\n  }, []);\n  const [toChain, setToChain] = useState<Chain>(currentChain);\n  const handleToChainChange = useCallback((chain: Chain) => {\n    setToChain(chain);\n  }, []);\n\n  const isIBCTransfer = useMemo(() => currentChain.id !== toChain.id, [currentChain, toChain]);\n\n  const ibcChannels = useRecoilValue(\n    ibcChannelListOfSelectorFamily({\n      sourceChainId: currentChain.id,\n      destinationChainId: toChain.id,\n    }),\n  );\n  const [ibcChannel, setIBCChannel] = useState<IBCSourceChainChannel | null>(\n    ibcChannels.length > 0 ? ibcChannels[0] : null,\n  );\n  useEffect(() => {\n    setIBCChannel(ibcChannels.length > 0 ? ibcChannels[0] : null);\n  }, [ibcChannels]);\n  const handleIBCChannelChange = useCallback((channel: IBCSourceChainChannel) => {\n    console.log(channel);\n    setIBCChannel(channel);\n  }, []);\n  const [ibcTimeoutMark, setIBCTimeoutMark] = useState<number>(1);\n  const handleIBCTimeoutChange = useCallback(\n    (event: Event, value: number | number[], activeThumb: number) => {\n      setIBCTimeoutMark(value as number);\n    },\n    [],\n  );\n  const ibcTimeout = useMemo(() => {\n    return ibcTimeoutDurationMarkList[ibcTimeoutMark].duration;\n  }, [ibcTimeoutMark]);\n\n  const [isSending, setIsSending] = useState<boolean>(false);\n  const notifyDeliveryTxResult = useCallback(\n    (result: DeliverTxResponse) => {\n      if (result.code === 0) {\n        enqueueSnackbar(\n          <Typography>\n            Transaction (\n            <a\n              target=\"_blank\"\n              href={currentChain.explorerURLs.transaction.replaceAll(\n                '{transaction}',\n                result.transactionHash,\n              )}\n              rel=\"noreferrer\">\n              {result.transactionHash}\n            </a>\n            ) broadcasted successfully\n          </Typography>,\n          {\n            variant: 'success',\n          },\n        );\n      } else {\n        enqueueSnackbar(\n          <Typography>\n            Transaction (\n            <a\n              target=\"_blank\"\n              href={currentChain.explorerURLs.transaction.replaceAll(\n                '{transaction}',\n                result.transactionHash,\n              )}\n              rel=\"noreferrer\">\n              {result.transactionHash}\n            </a>\n            ) failed on chain\n          </Typography>,\n          {\n            variant: 'error',\n          },\n        );\n      }\n    },\n    [enqueueSnackbar, currentChain],\n  );\n  const sendOnKeplr = useCallback(\n    () =>\n      (async () => {\n        setIsSending(true);\n        const offlineSigner =\n          currentWallet.type === WalletType.Ledger\n            ? window.getOfflineSignerOnlyAmino!(currentChain.id)\n            : window.getOfflineSigner!(currentChain.id);\n        const cosmJS = await SigningStargateClient.connectWithSigner(\n          currentChain.rpcBaseURLs.tendermint,\n          offlineSigner,\n        );\n\n        // TODO: form validation\n        if (isIBCTransfer) {\n          const result = await cosmJS.sendIbcTokens(\n            currentWallet.address,\n            toAddress,\n            {\n              denom: token.coinMinimalDenom,\n              amount: minimalCoinAmount.toString(10),\n            },\n            'transfer',\n            ibcChannel!.channelId,\n            {\n              revisionNumber: Long.fromNumber(0),\n              revisionHeight: Long.fromNumber(0),\n            },\n            DateTime.now().setZone('utc').plus(ibcTimeout).toMillis() * 1000000,\n            {\n              amount: [],\n              gas: '200000',\n            },\n            '',\n          );\n          notifyDeliveryTxResult(result);\n        } else {\n          const result = await cosmJS.sendTokens(\n            currentWallet.address,\n            toAddress,\n            [\n              {\n                denom: token.coinMinimalDenom,\n                amount: minimalCoinAmount.toString(10),\n              },\n            ],\n            {\n              amount: [],\n              gas: '200000',\n            },\n            '',\n          );\n          notifyDeliveryTxResult(result);\n        }\n      })().finally(() => {\n        setIsSending(false);\n      }),\n    [\n      currentChain,\n      currentWallet,\n      minimalCoinAmount,\n      toAddress,\n      token,\n      isIBCTransfer,\n      ibcChannel,\n      ibcTimeout,\n      notifyDeliveryTxResult,\n    ],\n  );\n\n  return (\n    <React.Fragment>\n      <TransferFormControl>\n        <TextField\n          sx={{\n            input: { textAlign: 'center' },\n          }}\n          label=\"From\"\n          value={currentWallet!.address}\n          InputProps={{\n            startAdornment: (\n              <InputAdornment sx={{ marginRight: 1 }} position=\"start\">\n                {currentChain.name}\n              </InputAdornment>\n            ),\n          }}\n          disabled\n        />\n      </TransferFormControl>\n      <TransferFormControl>\n        <InputLabel id=\"transfer-to-chain-label\">Destination Chain</InputLabel>\n        <ChainSelect\n          labelId=\"transfer-from-chain-label\"\n          label=\"Destination Chain\"\n          chainList={chainList}\n          value={toChain.id}\n          onChange={handleToChainChange}\n          disabled={isSending}\n        />\n      </TransferFormControl>\n      <TransferFormControl>\n        <TextField\n          label=\"Destination Address\"\n          value={toAddress}\n          onChange={handleToAddressChange}\n          disabled={isSending}\n        />\n      </TransferFormControl>\n      <TransferFormControl>\n        <InputLabel id=\"transfer-denom-label\">Token</InputLabel>\n        <CurrencySelect\n          labelId=\"transfer-denom-label\"\n          label=\"Token\"\n          currencyList={tokenList}\n          value={token.coinMinimalDenom}\n          onChange={handleTokenChange}\n          disabled={isSending}\n        />\n        <FormHelperText>\n          Max: {balance.humanReadableAmount} {balance.humanReadableDenom}\n        </FormHelperText>\n      </TransferFormControl>\n      <TransferFormControl>\n        <TextField\n          label=\"Amount\"\n          InputProps={{\n            inputComponent: AmountInputComponent as any,\n            endAdornment: (\n              <InputAdornment sx={{ marginLeft: 1 }} position=\"end\">\n                {token.coinDenom}\n              </InputAdornment>\n            ),\n          }}\n          variant=\"outlined\"\n          value={amount}\n          onChange={handleAmountChange}\n          disabled={isSending}\n        />\n        <FormHelperText>\n          Make sure you have reserved small amount of transaction fee or your transaction may fail.\n        </FormHelperText>\n      </TransferFormControl>\n\n      {isIBCTransfer && ibcChannel && (\n        <React.Fragment>\n          <TransferFormControl>\n            <InputLabel id=\"transfer-ibc-channel-label\">IBC Channel</InputLabel>\n            <IBCChannelSelect\n              labelId=\"transfer-ibc-channel-label\"\n              label=\"IBC Channel\"\n              ibcChannelList={ibcChannels}\n              destinationChainIdValue={toChain.id}\n              channelIdValue={ibcChannel!.channelId}\n              onChange={handleIBCChannelChange}\n              disabled={isSending}\n            />\n          </TransferFormControl>\n          <TransferFormControl>\n            <Box sx={{ marginTop: 1, marginRight: 3, marginBottom: 1, marginLeft: 3 }}>\n              <Typography align=\"left\">IBC Timeout</Typography>\n              <Slider\n                min={ibcTimeoutDurationMarkList[0].value}\n                max={ibcTimeoutDurationMarkList[ibcTimeoutDurationMarkList.length - 1].value}\n                aria-label=\"IBC Timeout\"\n                marks={ibcTimeoutDurationMarkList}\n                getAriaValueText={ibcTimeoutDurationValueText}\n                step={null}\n                valueLabelDisplay=\"off\"\n                value={ibcTimeoutMark}\n                onChange={handleIBCTimeoutChange}\n                disabled={isSending}\n              />\n            </Box>\n          </TransferFormControl>\n        </React.Fragment>\n      )}\n      <Button\n        sx={{ marginTop: '8px' }}\n        variant=\"contained\"\n        onClick={sendOnKeplr}\n        disabled={isSending}>\n        {isSending ? 'Reviewing on Keplr...' : 'Send on Keplr'}\n      </Button>\n    </React.Fragment>\n  );\n}\n\nexport default Transfer;\n","import BalanceList from '../../components/BalanceList';\nimport WalletAddressLabel from '../../components/WalletAddressLabel';\nimport { allBalanceOfSelector } from '../../recoil/balanceOf';\nimport currentChainAtom from '../../recoil/currentChain';\nimport currentWalletAtom from '../../recoil/currentWallet';\nimport ConnectKeplrButton from '../ConnectKeplrButton';\nimport Transfer from '../Transfer';\nimport Box from '@mui/material/Box';\nimport Tab from '@mui/material/Tab';\nimport Tabs from '@mui/material/Tabs';\nimport Typography from '@mui/material/Typography';\nimport { styled } from '@mui/system';\nimport React, { useState } from 'react';\nimport { useRecoilValue } from 'recoil';\n\nconst Separator = styled('div')({\n  padding: 15,\n});\n\nfunction WalletMain(props: WalletMainProps) {\n  const currentWallet = useRecoilValue(currentWalletAtom);\n  const currentChain = useRecoilValue(currentChainAtom);\n  const allBalanceOf = useRecoilValue(allBalanceOfSelector);\n  const [tabPage, setTabPage] = useState<number>(0);\n\n  if (currentWallet === null) {\n    return <ConnectKeplrButton />;\n  }\n\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    if (newValue === 2) {\n      window.open(\n        currentChain.explorerURLs.account.replaceAll('{account}', currentWallet.address),\n        'blank',\n      );\n      return;\n    }\n    setTabPage(newValue);\n  };\n\n  return (\n    <Box\n      sx={{ borderRadius: '8px', p: '15px', backgroundColor: '#fff' }}\n      display=\"flex\"\n      justifyContent=\"center\"\n      alignItems=\"center\">\n      <Box sx={{ width: '600px' }}>\n        <Typography sx={{ padding: '15px' }} fontSize=\"25px\">\n          {currentWallet.name}\n        </Typography>\n        <WalletAddressLabel address={currentWallet.address} copyable />\n        <Separator />\n        <Tabs centered value={tabPage} onChange={handleTabChange}>\n          <Tab label=\"Assets\" />\n          <Tab label=\"Transfer\" />\n          <Tab label=\"History\" />\n        </Tabs>\n        {tabPage === 0 && <BalanceList balances={allBalanceOf} onStartTransfer={() => {}} />}\n        {tabPage === 1 && <Transfer />}\n      </Box>\n    </Box>\n  );\n}\n\nexport type WalletMainProps = {};\n\nexport default WalletMain;\n","import React, { useCallback } from 'react';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { Chain } from '../../../apptypes.d';\nimport ChainSelect from '../../../components/ChainSelect';\nimport chainListSelector from '../../../recoil/chainList/selector';\nimport currentChainAtom from '../../../recoil/currentChain';\n\nfunction WalletHeaderChainSelector() {\n  const [currentChain, setCurrentChain] = useRecoilState(currentChainAtom);\n  const chainList = useRecoilValue(chainListSelector);\n\n  const handleChainSelectorChange = useCallback((chain: Chain) => {\n    setCurrentChain(chain);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <ChainSelect\n      value={currentChain.id}\n      chainList={chainList}\n      onChange={handleChainSelectorChange}\n    />\n  );\n}\n\nexport default WalletHeaderChainSelector;\n","import Box, { BoxProps } from '@mui/material/Box';\nimport styled from '@mui/system/styled';\nimport React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport BlockieAvatar from '../../components/BlockieAvatar';\nimport { currentAddressSelector } from '../../recoil/currentWallet';\nimport WalletHeaderChainSelector from './WalletHeaderChainSelector';\n\nconst SingleLineItem = styled((props: BoxProps) => <Box {...props} />)({\n  flexGrow: 0,\n  flexShrink: 0,\n  alignItems: 'center',\n  paddingRight: '0.5rem',\n  paddingLeft: '0.5rem',\n});\n\nfunction WalletHeader() {\n  const currentAddress = useRecoilValue(currentAddressSelector);\n\n  return (\n    <React.Fragment>\n      <SingleLineItem sx={{ display: 'flex', padding: 1, borderRadius: 1 }}>\n        <SingleLineItem\n          sx={{\n            flexWrap: 'wrap',\n            flexShrink: 1,\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n          }}>\n          Keplr Web Wallet (Unofficial)\n        </SingleLineItem>\n        <Box sx={{ flexGrow: 1 }}></Box>\n        <SingleLineItem>\n          <WalletHeaderChainSelector />\n        </SingleLineItem>\n        <SingleLineItem>\n          <BlockieAvatar value={currentAddress} />\n        </SingleLineItem>\n      </SingleLineItem>\n    </React.Fragment>\n  );\n}\n\nexport default WalletHeader;\n","import WalletHeader from '../WalletHeader';\nimport { Typography } from '@mui/material';\nimport React from 'react';\nimport { Outlet } from 'react-router-dom';\n\nfunction WalletAppLayout(props: WalletAppLayoutProps) {\n  return (\n    <React.Fragment>\n      <WalletHeader />\n      <Outlet />\n      <Typography sx={{ marginTop: '20px' }} textTransform=\"none\" fontSize=\"15px\" textAlign=\"left\">\n        WARNING: This software is provided without warranty of any kind. Use it at your own risk and\n        in no event shall the authors be liable for any claim, damages or other liability arising\n        from the software.\n      </Typography>\n    </React.Fragment>\n  );\n}\n\nexport type WalletAppLayoutProps = {};\n\nexport default WalletAppLayout;\n","const errorMessageGuard = (err: unknown, defaultMessage: string = 'unknown error'): string => {\n  if (err instanceof Error) {\n    return err.message;\n  }\n\n  return defaultMessage;\n};\n\nexport { errorMessageGuard };\n","import { Coin } from '../apptypes.d';\nimport axios from 'axios';\n\nconst getAccountCoinList = async (lcdBaseURL: string, address: string): Promise<Coin[]> => {\n  const coinList: Coin[] = [];\n  const limit = 20;\n  let page = 0;\n  while (true) {\n    const bankBalanceList = await getBankBalanceList(lcdBaseURL, address, limit, page * limit);\n    for (const bankBalance of bankBalanceList) {\n      let humanReadableDenom = bankBalance.denom;\n      if (bankBalance.denom.startsWith('ibc/')) {\n        humanReadableDenom = await getIBCDenomTraces(lcdBaseURL, bankBalance.denom);\n      }\n      const coin: Coin = {\n        denom: bankBalance.denom,\n        amount: bankBalance.amount,\n        humanReadableDenom,\n        humanReadableAmount: bankBalance.amount,\n      };\n      coinList.push(coin);\n    }\n\n    if (bankBalanceList.length < limit) {\n      break;\n    }\n    page += 1;\n  }\n\n  return coinList;\n};\n\nconst getBankBalanceList = async (\n  lcdBaseURL: string,\n  address: string,\n  limit: number,\n  offset: number,\n): Promise<BankBalance[]> => {\n  const resp = await axios.get(\n    `${lcdBaseURL}/cosmos/bank/v1beta1/balances/${address}?pagination.limit=${limit.toString()}&pagination.offset=${offset.toString()}`,\n  );\n  return resp.data.balances;\n};\n\nconst getIBCDenomTraces = async (lcdBaseURL: string, denom: string): Promise<string> => {\n  const resp = await axios.get(`${lcdBaseURL}/ibc/apps/transfer/v1/denom_traces/${denom.slice(4)}`);\n  return `${resp.data.denom_trace.path}/${resp.data.denom_trace.base_denom}`;\n};\n\ntype BankBalance = {\n  amount: string;\n  denom: string;\n};\n\nexport { getAccountCoinList };\n","import { ChainInfo } from '@keplr-wallet/types';\n\nconst addChainToKeplr = async (Chain: ChainInfo) => {\n  if (!window.keplr || !('experimentalSuggestChain' in window.keplr)) {\n    throw new Error(\n      'Keplr does not support adding custom network. Please update to the latest version.',\n    );\n  }\n  // Keplr v0.6.4 introduces an experimental feature that supports the feature to suggests the chain from a webpage.\n  // cosmoshub-3 is integrated to Keplr so the code should return without errors.\n  // The code below is not needed for cosmoshub-3, but may be helpful if you’re adding a custom chain.\n  // If the user approves, the chain will be added to the user's Keplr extension.\n  // If the user rejects it or the suggested chain information doesn't include the required fields, it will throw an error.\n  // If the same chain id is already registered, it will resolve and not require the user interactions.\n  await window.keplr!.experimentalSuggestChain(Chain);\n};\n\nexport { addChainToKeplr };\n","import { ChainSource, WalletType } from '../../apptypes.d';\nimport { keplrConfigs } from '../../config';\nimport { errorMessageGuard } from '../../error';\nimport balanceOfSelectorFamily, { allBalanceOfSelector } from '../../recoil/balanceOf';\nimport currentChainAtom from '../../recoil/currentChain';\nimport currentWalletAtom from '../../recoil/currentWallet';\nimport isPendingToConnectKeplrAtom from '../../recoil/isPendingToConnectKeplr';\nimport { getAccountCoinList } from '../../service/cosmos';\nimport { addChainToKeplr } from '../../service/keplr';\nimport { useSnackbar } from 'notistack';\nimport { useCallback, useEffect, useRef } from 'react';\nimport { useRecoilCallback, useRecoilState, useResetRecoilState } from 'recoil';\n\nfunction WalletAppStateEffect() {\n  const { enqueueSnackbar } = useSnackbar();\n\n  const [isPendingToConnectKeplr, setIsPendingToConnectKeplr] = useRecoilState(\n    isPendingToConnectKeplrAtom,\n  );\n  const [currentWallet, setCurrentWallet] = useRecoilState(currentWalletAtom);\n  const resetCurrentWallet = useResetRecoilState(currentWalletAtom);\n  const resetAllBalanceOf = useResetRecoilState(allBalanceOfSelector);\n  const [currentChain, setCurrentChain] = useRecoilState(currentChainAtom);\n\n  const prevChain = useRef(currentChain);\n  useEffect(() => {\n    (async () => {\n      if (currentChain.source === ChainSource.AppDefault) {\n        try {\n          await addChainToKeplr(keplrConfigs[currentChain.id]);\n        } catch (err) {\n          setCurrentChain(prevChain.current);\n\n          const message = errorMessageGuard(err);\n          enqueueSnackbar(\n            `Error suggesting custom chain ${currentChain.name} to Keplr: ${message}`,\n            {\n              variant: 'error',\n            },\n          );\n          return;\n        }\n      }\n      prevChain.current = currentChain;\n\n      setIsPendingToConnectKeplr(true);\n    })();\n  }, [enqueueSnackbar, setCurrentChain, setIsPendingToConnectKeplr, currentChain]);\n\n  const updateCurrentWallet = useCallback(\n    () =>\n      (async () => {\n        try {\n          const key = await window.keplr!.getKey(currentChain.id);\n          setCurrentWallet({\n            name: key.name,\n            type: key.isNanoLedger ? WalletType.Ledger : WalletType.Local,\n            address: key.bech32Address,\n          });\n        } catch (err) {\n          const message = errorMessageGuard(err);\n          enqueueSnackbar(`Error requesting Keplr key: ${message}`, {\n            variant: 'error',\n          });\n          return;\n        }\n      })(),\n    [currentChain, enqueueSnackbar, setCurrentWallet],\n  );\n\n  const isConnectingKeplr = useRef(false);\n  const connectKeplr = useCallback(\n    () =>\n      (async () => {\n        if (isConnectingKeplr.current) {\n          return;\n        }\n        isConnectingKeplr.current = true;\n\n        resetCurrentWallet();\n        resetAllBalanceOf();\n        try {\n          await window.keplr!.enable(currentChain.id);\n        } catch (err) {\n          const message = errorMessageGuard(err);\n          enqueueSnackbar(`Error connecting Keplr wallet: ${message}`, {\n            variant: 'error',\n          });\n          return;\n        }\n\n        try {\n          const key = await window.keplr!.getKey(currentChain.id);\n          setCurrentWallet({\n            name: key.name,\n            type: key.isNanoLedger ? WalletType.Ledger : WalletType.Local,\n            address: key.bech32Address,\n          });\n        } catch (err) {\n          const message = errorMessageGuard(err);\n          enqueueSnackbar(`Error requesting Keplr key: ${message}`, {\n            variant: 'error',\n          });\n          return;\n        }\n\n        await updateCurrentWallet();\n      })().finally(() => {\n        isConnectingKeplr.current = false;\n        setIsPendingToConnectKeplr(false);\n      }),\n    [\n      currentChain,\n      enqueueSnackbar,\n      setIsPendingToConnectKeplr,\n      resetCurrentWallet,\n      resetAllBalanceOf,\n      updateCurrentWallet,\n      setCurrentWallet,\n    ],\n  );\n\n  const updateWalletBalances = useRecoilCallback(\n    ({ set }) =>\n      () =>\n        (async () => {\n          if (currentWallet === null) {\n            return;\n          }\n          try {\n            const tokenBalanceList = await getAccountCoinList(\n              currentChain.rpcBaseURLs.lcd,\n              currentWallet!.address,\n            );\n            tokenBalanceList.forEach((coin) => {\n              set(balanceOfSelectorFamily(coin.denom), coin);\n            });\n          } catch (err) {\n            const message = errorMessageGuard(err);\n            enqueueSnackbar(`Error retrieving wallet balances: ${message}`, {\n              variant: 'error',\n            });\n          }\n        })(),\n    [currentChain, currentWallet, enqueueSnackbar],\n  );\n\n  useEffect(() => {\n    if (isPendingToConnectKeplr) {\n      connectKeplr();\n    }\n  }, [isPendingToConnectKeplr, connectKeplr]);\n\n  useEffect(() => {\n    window.addEventListener('keplr_keystorechange', (event) => {\n      connectKeplr();\n    });\n  }, [connectKeplr]);\n\n  let prevWalletAddress = useRef(currentWallet?.address);\n  useEffect(() => {\n    if (prevWalletAddress.current !== currentWallet?.address) {\n      prevWalletAddress.current = currentWallet?.address;\n      updateWalletBalances();\n    }\n  }, [currentWallet, updateWalletBalances]);\n\n  const updateWalletBalancesPeriodically = useCallback(() => {\n    updateWalletBalances().finally(() => {\n      setTimeout(updateWalletBalancesPeriodically, 10000);\n    });\n  }, [updateWalletBalances]);\n  useEffect(() => {\n    setTimeout(updateWalletBalancesPeriodically, 15000);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return null;\n}\n\nexport default WalletAppStateEffect;\n","import WalletMain from '../WalletMain';\nimport Layout from './Layout';\nimport WalletAppStateEffect from './StateEffect';\nimport React from 'react';\nimport { Route, Routes } from 'react-router-dom';\n\nfunction WalletApp() {\n  return (\n    <React.Fragment>\n      <WalletAppStateEffect />\n      <Routes>\n        <Route path=\"/\" element={<Layout />}>\n          <Route index element={<WalletMain />} />\n        </Route>\n      </Routes>\n    </React.Fragment>\n  );\n}\n\nexport default WalletApp;\n","import './App.css';\nimport WalletApp from './containers/WalletApp';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Container from '@mui/material/Container';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Typography from '@mui/material/Typography';\nimport { useSnackbar } from 'notistack';\nimport React, { useEffect } from 'react';\n\nfunction AppViewport(props: { children: React.ReactNode }) {\n  return (\n    <Box\n      sx={{\n        backgroundColor: '#f8f9fe',\n      }}>\n      <Container maxWidth=\"md\">\n        <Box\n          sx={{\n            height: '100vh',\n          }}>\n          {props.children}\n        </Box>\n      </Container>\n    </Box>\n  );\n}\n\nfunction App() {\n  const { enqueueSnackbar } = useSnackbar();\n  const isKeplrInstalled = !!window.keplr;\n\n  useEffect(() => {\n    if (!isKeplrInstalled) {\n      enqueueSnackbar('Keplr not installed!', {\n        variant: 'error',\n      });\n    }\n  }, [enqueueSnackbar, isKeplrInstalled]);\n\n  return (\n    <div className=\"App\">\n      <CssBaseline />\n      <AppViewport>{isKeplrInstalled ? <WalletApp /> : <KeplrNotInstalled />}</AppViewport>\n    </div>\n  );\n}\n\nfunction KeplrNotInstalled() {\n  return (\n    <Box sx={{ padding: '15px' }}>\n      <Typography>\n        Keplr not installed! Please install{' '}\n        <a\n          href=\"https://chrome.google.com/webstore/detail/keplr/dmkamcknogkgcdfhhbddcghachkejeap\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\">\n          Keplr\n        </a>{' '}\n        and refresh this page.\n      </Typography>\n      <Button variant=\"contained\" onClick={() => window.location.reload()}>\n        Refresh\n      </Button>\n    </Box>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { SnackbarProvider } from 'notistack';\nimport React, { ErrorInfo } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { RecoilRoot } from 'recoil';\n\nclass ErrorBoundary extends React.Component<{}, { hasError: boolean }> {\n  constructor(props: {}) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {}\n\n  render() {\n    if (this.state.hasError) {\n      return <span>Sorry! Something went wrong. Refresh this page and try again.</span>;\n    }\n\n    return this.props.children;\n  }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <Router basename={process.env.PUBLIC_URL}>\n        <SnackbarProvider\n          maxSnack={3}\n          anchorOrigin={{\n            vertical: 'top',\n            horizontal: 'right',\n          }}>\n          <ErrorBoundary>\n            <App />\n          </ErrorBoundary>\n        </SnackbarProvider>\n      </Router>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}